import React, { useState } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, Alert } from 'react-native';
import { Ionicons, FontAwesome, Feather } from '@expo/vector-icons';
import AuthService from '../Services/AuthService';

const SignIn = ({ navigation }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);
  const [loading, setLoading] = useState(false);

  const handleLogin = async () => {
    if (!email || !password) {
      Alert.alert('Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u');
      return;
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      Alert.alert('L·ªói', 'Vui l√≤ng nh·∫≠p email h·ª£p l·ªá');
      return;
    }

    setLoading(true);

    try {
      if (
        (email === 'test@demo.com' && password === '123456') ||
        (email === 'admin@demo.com' && password === 'admin123') ||
        (email === 'user@demo.com' && password === 'user123')
      ) {
        Alert.alert('Th√†nh c√¥ng', 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', [
          { text: 'OK', onPress: () => navigation.navigate('MainTabs') }
        ]);
        return;
      }

      const result = await AuthService.login(email, password);

      if (result.success) {
        Alert.alert('Th√†nh c√¥ng', 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!', [
          { text: 'OK', onPress: () => navigation.navigate('MainTabs') }
        ]);
      } else {
        let errorMessage = 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i';

        if (result.error === 'Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c') {
          errorMessage = 'T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ki·ªÉm tra email v√† x√°c th·ª±c OTP.';
        } else if (
          result.error === 'M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c' ||
          result.error === 'Invalid credentials' ||
          result.error === 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c'
        ) {
          errorMessage = 'Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c.\n\nTh·ª≠ t√†i kho·∫£n demo: test@demo.com / 123456';
        } else if (result.error === 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i') {
          errorMessage = 'T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ƒëƒÉng k√Ω tr∆∞·ªõc ho·∫∑c th·ª≠ t√†i kho·∫£n demo.';
        } else if (result.message) {
          errorMessage = result.message;
        } else if (result.error) {
          errorMessage = result.error;
        }

        Alert.alert('L·ªói', errorMessage);
      }
    } catch (error) {
      let errorMessage = 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p. Vui l√≤ng th·ª≠ l·∫°i sau.\n\nTh·ª≠ t√†i kho·∫£n demo: test@demo.com / 123456';

      if (error.error === 'Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c') {
        errorMessage = 'T√†i kho·∫£n ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c. Vui l√≤ng ki·ªÉm tra email v√† x√°c th·ª±c OTP.';
      } else if (error.error) {
        errorMessage = error.error + '\n\nTh·ª≠ t√†i kho·∫£n demo: test@demo.com / 123456';
      } else if (error.message) {
        errorMessage = error.message + '\n\nTh·ª≠ t√†i kho·∫£n demo: test@demo.com / 123456';
      }

      Alert.alert('L·ªói', errorMessage);
    } finally {
      setLoading(false);
    }
  };

  return (
    <View style={styles.container}>
      <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
        <Ionicons name="arrow-back" size={24} color="white" />
      </TouchableOpacity>

      <Text style={styles.title}>ƒêƒÉng nh·∫≠p</Text>

      <View style={styles.infoBox}>
        <Text style={styles.infoText}>
          üí° H∆∞·ªõng d·∫´n ƒëƒÉng nh·∫≠p:
          {'\n'}‚Ä¢ N·∫øu b·∫°n v·ª´a ƒëƒÉng k√Ω, vui l√≤ng ki·ªÉm tra email v√† ho√†n t·∫•t x√°c th·ª±c OTP tr∆∞·ªõc
          {'\n'}‚Ä¢ T√†i kho·∫£n demo: test@demo.com / 123456
        </Text>
      </View>

      <View style={styles.inputBox}>
        <FontAwesome name="envelope" size={20} color="white" style={styles.icon} />
        <TextInput
          style={styles.input}
          placeholder="Email"
          placeholderTextColor="#888"
          keyboardType="email-address"
          value={email}
          onChangeText={setEmail}
        />
      </View>

      <View style={styles.inputBox}>
        <Feather name="lock" size={20} color="white" style={styles.icon} />
        <TextInput
          style={styles.input}
          placeholder="M·∫≠t kh·∫©u"
          placeholderTextColor="#888"
          secureTextEntry={!showPassword}
          value={password}
          onChangeText={setPassword}
        />
        <TouchableOpacity onPress={() => setShowPassword(!showPassword)}>
          <Feather name={showPassword ? 'eye-off' : 'eye'} size={20} color="#888" />
        </TouchableOpacity>
      </View>

      <TouchableOpacity 
        style={styles.demoButton}
        onPress={() => {
          setEmail('test@demo.com');
          setPassword('123456');
        }}
      >
        <Text style={styles.demoButtonText}>üìù ƒêi·ªÅn t√†i kho·∫£n demo</Text>
      </TouchableOpacity>

      <View style={styles.rowOptions}>
        <TouchableOpacity style={styles.checkboxContainer} onPress={() => setRememberMe(!rememberMe)}>
          <Feather name={rememberMe ? 'check-circle' : 'circle'} size={18} color={rememberMe ? '#FFC107' : '#888'} />
          <Text style={styles.rememberText}>Nh·ªõ m·∫≠t kh·∫©u</Text>
        </TouchableOpacity>
        <TouchableOpacity>
          <Text style={styles.forgotText}>Qu√™n m·∫≠t kh·∫©u</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => navigation.navigate('ConfirmOTP', { email })}>
          <Text style={styles.forgotText}>X√°c th·ª±c OTP</Text>
        </TouchableOpacity>
      </View>

      <TouchableOpacity
        style={styles.continueButton}
        onPress={handleLogin}
        disabled={loading}
      >
        <Text style={styles.continueText}>{loading ? 'ƒêang ƒëƒÉng nh·∫≠p...' : 'ƒêƒÉng nh·∫≠p'}</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'black',
    paddingHorizontal: 20,
    paddingTop: 50,
  },
  backButton: {
    marginBottom: 20,
  },
  title: {
    color: 'white',
    fontSize: 28,
    fontWeight: '600',
    marginBottom: 40,
  },
  inputBox: {
    flexDirection: 'row',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: 'white',
    borderRadius: 10,
    paddingHorizontal: 12,
    paddingVertical: 10,
    marginBottom: 20,
  },
  icon: {
    marginRight: 10,
  },
  input: {
    flex: 1,
    color: 'white',
    fontSize: 16,
    paddingVertical: 10,
  },
  rowOptions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 30,
  },
  checkboxContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  rememberText: {
    color: 'white',
    marginLeft: 6,
  },
  forgotText: {
    color: '#FFC107',
  },
  continueButton: {
    backgroundColor: '#FFC107',
    paddingVertical: 15,
    borderRadius: 30,
    alignItems: 'center',
    marginBottom: 30,
  },
  continueText: {
    color: 'black',
    fontWeight: '600',
    fontSize: 16,
  },
  infoBox: {
    backgroundColor: '#1a1a1a',
    padding: 12,
    borderRadius: 8,
    marginBottom: 20,
    borderLeftWidth: 3,
    borderLeftColor: '#FFC107',
  },
  infoText: {
    color: '#ccc',
    fontSize: 13,
    lineHeight: 18,
  },
  demoButton: {
    backgroundColor: '#333',
    borderRadius: 8,
    paddingVertical: 10,
    paddingHorizontal: 15,
    marginVertical: 10,
    alignItems: 'center',
  },
  demoButtonText: {
    color: '#FFC107',
    fontSize: 14,
    fontWeight: '500',
  },
});

export default SignIn;
