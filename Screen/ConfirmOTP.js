import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, TouchableOpacity, StyleSheet, KeyboardAvoidingView, Platform, Alert } from 'react-native';
import AuthService from '../Services/AuthService';

const ConfirmOTP = ({navigation, route}) => {
  const [otp, setOtp] = useState(['', '', '', '', '', '']);
  const [timer, setTimer] = useState(59);
  const [loading, setLoading] = useState(false);
  
  const { email, testOTP, emailSendingFailed } = route.params || {};

  // N·∫øu c√≥ l·ªói g·ª≠i email ho·∫∑c c√≥ testOTP, kh√¥ng c·∫ßn ƒë·ª£i timer
  const canResendImmediately = emailSendingFailed || testOTP;

  // Hi·ªÉn th·ªã OTP test n·∫øu c√≥ l·ªói g·ª≠i email
  useEffect(() => {
    if (testOTP && emailSendingFailed) {
      Alert.alert(
        'üìß L·ªói g·ª≠i email', 
        `C√≥ l·ªói khi g·ª≠i email OTP.\n\nOTP test cho dev: ${testOTP}\n\nB·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng m√£ n√†y ƒë·ªÉ ti·∫øp t·ª•c ho·∫∑c th·ª≠ g·ª≠i l·∫°i email.`,
        [
          { text: 'OK', style: 'default' },
          { 
            text: 'ƒêi·ªÅn OTP test', 
            onPress: () => {
              const otpString = testOTP.toString();
              const otpArray = otpString.split('').slice(0, 6);
              while (otpArray.length < 6) otpArray.push('');
              setOtp(otpArray);
            }
          }
        ]
      );
    }
  }, [testOTP, emailSendingFailed]);

  useEffect(() => {
    // N·∫øu c√≥ th·ªÉ g·ª≠i l·∫°i ngay l·∫≠p t·ª©c (c√≥ l·ªói email), kh√¥ng b·∫Øt ƒë·∫ßu timer
    if (canResendImmediately) {
      setTimer(0);
      return;
    }

    const interval = setInterval(() => {
      setTimer((prev) => {
        if (prev <= 1) {
          clearInterval(interval);
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(interval);
  }, [canResendImmediately]);

  const handleVerifyOTP = async () => {
    const otpCode = otp.join('');
    
    if (otpCode.length !== 6) {
      Alert.alert('L·ªói', 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß m√£ OTP');
      return;
    }

    setLoading(true);
    try {
      const result = await AuthService.verifyOTP(email, otpCode);
      
      if (result.success) {
        Alert.alert('Th√†nh c√¥ng', 'X√°c th·ª±c th√†nh c√¥ng!', [
          {
            text: 'OK',
            onPress: () => navigation.navigate('MainTabs')
          }
        ]);
      } else {
        Alert.alert('L·ªói', result.message || 'M√£ OTP kh√¥ng ch√≠nh x√°c');
      }
    } catch (error) {
      console.error('OTP verification error:', error);
      Alert.alert('L·ªói', error.error || 'C√≥ l·ªói x·∫£y ra khi x√°c th·ª±c OTP');
    } finally {
      setLoading(false);
    }
  };

  const handleResendOTP = async () => {
    // N·∫øu kh√¥ng th·ªÉ g·ª≠i l·∫°i ngay v√† v·∫´n c√≤n timer, return
    if (!canResendImmediately && timer > 0) return;
    
    try {
      const result = await AuthService.resendOTP(email);
      console.log('Resend OTP result:', result);
      
      if (result.success) {
        // Ch·ªâ set timer n·∫øu kh√¥ng c√≥ l·ªói g·ª≠i email
        if (!result.testOTP) {
          setTimer(59);
        } else {
          // N·∫øu v·∫´n c√≥ testOTP, gi·ªØ timer = 0 ƒë·ªÉ c√≥ th·ªÉ g·ª≠i l·∫°i ti·∫øp
          setTimer(0);
        }
        
        if (result.testOTP) {
          // N·∫øu server tr·∫£ v·ªÅ testOTP, nghƒ©a l√† v·∫´n c√≥ l·ªói g·ª≠i email
          Alert.alert(
            'G·ª≠i l·∫°i th√†nh c√¥ng', 
            `M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o.\n\nDo l·ªói g·ª≠i email, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng OTP test: ${result.testOTP}`,
            [
              { text: 'OK', style: 'default' },
              { 
                text: 'S·ª≠ d·ª•ng OTP test', 
                onPress: () => {
                  const otpString = result.testOTP.toString();
                  const otpArray = otpString.split('').slice(0, 6);
                  while (otpArray.length < 6) otpArray.push('');
                  setOtp(otpArray);
                }
              }
            ]
          );
        } else {
          // OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng qua email
          Alert.alert('Th√†nh c√¥ng', 'M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n. Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ (bao g·ªìm th∆∞ m·ª•c Spam).');
        }
      } else {
        Alert.alert('L·ªói', result.message || 'Kh√¥ng th·ªÉ g·ª≠i l·∫°i OTP. Vui l√≤ng th·ª≠ l·∫°i sau.');
      }
    } catch (error) {
      console.error('Resend OTP error:', error);
      Alert.alert('L·ªói', 'C√≥ l·ªói x·∫£y ra khi g·ª≠i l·∫°i OTP. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.');
    }
  };

  const handleChange = (text, index) => {
    const newOtp = [...otp];
    newOtp[index] = text;
    setOtp(newOtp);

    if (text && index < 5) {
      inputs[index + 1].focus();
    }
  };

  const inputs = [];

  return (
    <KeyboardAvoidingView
      style={styles.container}
      behavior={Platform.OS === 'ios' ? 'padding' : undefined}
    >
      <TouchableOpacity style={styles.backButton} onPress={()=> navigation.goBack()}>
        <Text style={styles.backText}>‚Üê</Text>
      </TouchableOpacity>

      <Text style={styles.title}>X√°c nh·∫≠n m√£ OTP</Text>
      <Text style={styles.subtitle}>
        B·∫°n c·∫ßn nh·∫≠p m√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email {email || 'ƒë√£ ƒëƒÉng k√Ω'}.
      </Text>

      {/* Hi·ªÉn th·ªã OTP test n·∫øu c√≥ */}
      {testOTP && (
        <View style={styles.testOTPBox}>
          <Text style={styles.testOTPTitle}>üîë OTP T·∫°m th·ªùi (L·ªói email service)</Text>
          <Text style={styles.testOTPCode}>{testOTP}</Text>
          <Text style={styles.testOTPNote}>
            B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng m√£ n√†y ƒë·ªÉ ti·∫øp t·ª•c, ho·∫∑c th·ª≠ "G·ª≠i l·∫°i OTP" ƒë·ªÉ c√≥ c∆° h·ªôi nh·∫≠n email th·ª±c.
          </Text>
          <TouchableOpacity 
            style={styles.useTestOTPButton}
            onPress={() => {
              const otpString = testOTP.toString();
              const otpArray = otpString.split('').slice(0, 6);
              while (otpArray.length < 6) otpArray.push('');
              setOtp(otpArray);
            }}
          >
            <Text style={styles.useTestOTPText}>S·ª≠ d·ª•ng OTP n√†y</Text>
          </TouchableOpacity>
        </View>
      )}

      {/* Th√¥ng b√°o h∆∞·ªõng d·∫´n */}
      <View style={styles.helpBox}>
        <Text style={styles.helpTitle}>
          üìß {emailSendingFailed ? 'L·ªói g·ª≠i email OTP' : 'Kh√¥ng nh·∫≠n ƒë∆∞·ª£c OTP?'}
        </Text>
        <Text style={styles.helpText}>
          {emailSendingFailed ? (
            `‚Ä¢ Server c√≥ l·ªói g·ª≠i email\n‚Ä¢ S·ª≠ d·ª•ng OTP test b√™n tr√™n\n‚Ä¢ C√≥ th·ªÉ g·ª≠i l·∫°i OTP ngay l·∫≠p t·ª©c (kh√¥ng c·∫ßn ƒë·ª£i)\n‚Ä¢ Email service c√≥ th·ªÉ ƒë√£ ƒë∆∞·ª£c s·ª≠a`
          ) : (
            `‚Ä¢ Ki·ªÉm tra th∆∞ m·ª•c Spam/Junk\n‚Ä¢ ƒê·ª£i v√†i ph√∫t v√† th·ª≠ l·∫°i\n‚Ä¢ Ki·ªÉm tra ƒë·ªãa ch·ªâ email ƒë√£ ƒë√∫ng ch∆∞a\n‚Ä¢ S·ª≠ d·ª•ng n√∫t "G·ª≠i l·∫°i m√£ OTP" b√™n d∆∞·ªõi`
          )}
        </Text>
        
        {/* N√∫t th·ª≠ email kh√°c */}
        <TouchableOpacity 
          style={[styles.changeEmailButton, { marginTop: 15 }]}
          onPress={() => {
            Alert.prompt(
              'Th·ª≠ email kh√°c',
              'Nh·∫≠p ƒë·ªãa ch·ªâ email kh√°c ƒë·ªÉ nh·∫≠n OTP:',
              [
                { text: 'H·ªßy', style: 'cancel' },
                { 
                  text: 'G·ª≠i OTP', 
                  onPress: async (newEmail) => {
                    if (newEmail && newEmail.includes('@')) {
                      try {
                        const result = await AuthService.resendOTP(newEmail);
                        if (result.success) {
                          Alert.alert('Th√†nh c√¥ng', `OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ${newEmail}`);
                        } else {
                          Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ g·ª≠i OTP ƒë·∫øn email n√†y');
                        }
                      } catch (error) {
                        Alert.alert('L·ªói', 'C√≥ l·ªói x·∫£y ra');
                      }
                    } else {
                      Alert.alert('L·ªói', 'Email kh√¥ng h·ª£p l·ªá');
                    }
                  }
                }
              ],
              'plain-text',
              email
            );
          }}
        >
          <Text style={styles.changeEmailText}>üìß Th·ª≠ g·ª≠i ƒë·∫øn email kh√°c</Text>
        </TouchableOpacity>

        <TouchableOpacity 
          style={styles.changeEmailButton}
          onPress={() => {
            Alert.alert(
              'Thay ƒë·ªïi email',
              'Email hi·ªán t·∫°i kh√¥ng ch√≠nh x√°c? B·∫°n c√≥ th·ªÉ quay l·∫°i m√†n h√¨nh ƒëƒÉng k√Ω ƒë·ªÉ s·ª≠a email.',
              [
                { text: '·ªû l·∫°i', style: 'cancel' },
                { text: 'Quay l·∫°i ƒëƒÉng k√Ω', onPress: () => navigation.goBack() }
              ]
            );
          }}
        >
          <Text style={styles.changeEmailText}>üìß Quay l·∫°i thay ƒë·ªïi email ch√≠nh</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.otpContainer}>
        {otp.map((digit, index) => (
          <TextInput
            key={index}
            style={styles.otpBox}
            keyboardType="numeric"
            maxLength={1}
            value={digit}
            onChangeText={(text) => handleChange(text, index)}
            ref={(ref) => (inputs[index] = ref)}
          />
        ))}
      </View>

      <Text style={styles.timer}>
        {canResendImmediately ? 'C√≥ th·ªÉ g·ª≠i l·∫°i ngay' : `00:${timer.toString().padStart(2, '0')}`}
      </Text>
      
      {/* N√∫t g·ª≠i l·∫°i OTP - hi·ªÉn th·ªã kh√°c nhau t√πy t√¨nh hu·ªëng */}
      <TouchableOpacity 
        onPress={handleResendOTP}
        disabled={!canResendImmediately && timer > 0}
        style={[styles.resendButton, (!canResendImmediately && timer > 0) && styles.disabledButton]}
      >
        <Text style={[styles.resendText, (!canResendImmediately && timer > 0) && styles.disabledText]}>
          {canResendImmediately 
            ? 'G·ª≠i l·∫°i m√£ OTP' 
            : (timer > 0 ? `G·ª≠i l·∫°i sau ${timer}s` : 'G·ª≠i l·∫°i m√£ OTP')
          }
        </Text>
      </TouchableOpacity>

      <TouchableOpacity 
        style={styles.continueButton} 
        onPress={handleVerifyOTP}
        disabled={loading}
      >
        <Text style={styles.continueText}>
          {loading ? 'ƒêang x√°c th·ª±c...' : 'X√°c nh·∫≠n'}
        </Text>
      </TouchableOpacity>
    </KeyboardAvoidingView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
    paddingHorizontal: 20,
    paddingTop: 60,
  },
  backButton: {
    marginBottom: 30,
  },
  backText: {
    fontSize: 24,
    color: '#fff',
  },
  title: {
    fontSize: 24,
    color: '#FFC107',
    fontWeight: 'bold',
    marginBottom: 10,
  },
  subtitle: {
    color: '#ccc',
    marginBottom: 30,
  },
  otpContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 20,
  },
  otpBox: {
    width: 40,
    height: 50,
    borderWidth: 1,
    borderColor: '#FFC107',
    color: '#fff',
    textAlign: 'center',
    fontSize: 18,
    borderRadius: 8,
  },
  timer: {
    color: '#ccc',
    textAlign: 'right',
    marginBottom: 30,
  },
  continueButton: {
    backgroundColor: '#FFC107',
    paddingVertical: 15,
    borderRadius: 30,
    alignItems: 'center',
  },
  continueText: {
    color: '#000',
    fontWeight: 'bold',
    fontSize: 16,
  },
  resendText: {
    color: '#FFC107',
    textAlign: 'center',
    textDecorationLine: 'underline',
    fontSize: 14,
    fontWeight: '500',
  },
  resendButton: {
    paddingVertical: 12,
    paddingHorizontal: 20,
    borderRadius: 20,
    backgroundColor: 'transparent',
    borderWidth: 1,
    borderColor: '#FFC107',
    marginBottom: 20,
    alignItems: 'center',
  },
  disabledButton: {
    borderColor: '#666',
  },
  disabledText: {
    color: '#666',
  },
  helpBox: {
    backgroundColor: '#1a1a1a',
    padding: 15,
    borderRadius: 10,
    marginBottom: 20,
    borderLeftWidth: 3,
    borderLeftColor: '#FFC107',
  },
  helpTitle: {
    color: '#FFC107',
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 8,
  },
  helpText: {
    color: '#ccc',
    fontSize: 12,
    lineHeight: 18,
  },
  changeEmailButton: {
    marginTop: 10,
    paddingVertical: 8,
    paddingHorizontal: 12,
    backgroundColor: '#333',
    borderRadius: 6,
    alignItems: 'center',
  },
  changeEmailText: {
    color: '#FFC107',
    fontSize: 12,
    fontWeight: '500',
  },
  testOTPBox: {
    backgroundColor: '#2d1f0f',
    borderWidth: 1,
    borderColor: '#FFC107',
    padding: 15,
    borderRadius: 10,
    marginBottom: 20,
    alignItems: 'center',
  },
  testOTPTitle: {
    color: '#FFC107',
    fontSize: 14,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  testOTPCode: {
    color: '#fff',
    fontSize: 24,
    fontWeight: 'bold',
    fontFamily: 'monospace',
    letterSpacing: 2,
    marginBottom: 12,
  },
  useTestOTPButton: {
    backgroundColor: '#FFC107',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 20,
  },
  useTestOTPText: {
    color: '#000',
    fontSize: 12,
    fontWeight: 'bold',
  },
  testOTPNote: {
    color: '#ccc',
    fontSize: 11,
    textAlign: 'center',
    marginBottom: 12,
    lineHeight: 16,
  },
});

export default ConfirmOTP;
